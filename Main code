#Libraries and packages
import os
from datetime import datetime
import time
import linecache
import pandas as pd
from xlwt import Workbook
import matplotlib.pyplot as plt
import xlsxwriter
#lists to be filled with description
Datings = []
Timings = []
Passed_elp_log_files = []
Initials = []
Mod = []
Passed_elp_final_files = []
Failed_files = []
acceptanc_failure = []
Initial_fails = []
data = []
initial_indices = []
invalid = []
DataFrameList = []
ListOfLists = []
#Excel workbook and sheet created
wb = Workbook()
sheet1 = wb.add_sheet('Sheet 1')
#Dictionary to collect the initail breakings data
Initial_breakings = {'CORRDB2 start':'','CORRDB2 finish':'','LDO start':'','LDO calibrating start':'','LDO calibrating end':'',
                     'LDO end':'','TX_PKDET start':'','TX_PKDET calibrating start':'','TX_PKDET calibrating end':'',
                      'TX_PKDET end':'','RX_PKDET start':'', 'RX_PKDET calibrating start':'','RX_PKDET calibrating end':'',
                     'RX_PKDET end':'','QILO start':'','QILO calibrating start':'', 'QILO calibrating end':'','QILO end':'',
                     'TXUT start':'','TXUT calibrating start':'','TXUT calibrating end':'', 'TXUT end':'','CDATA start':'','CDATA end':'','initial end':'',
                     'I T':'', 'I F':'', 'TCS S':'', 'TCS T':'', 'DC S':'', 'DC T':'', 'IQ S':'', 'IQ T':''}
#dictionary to collect the data of passed files that will be imported to the excel sheet
Titles = {'MOD#':'','Path':'','Test Start':'','CORRDB2':'','RESET 1':'','LDO':'','RESET 2':'','TX Pkdet':'','RX Pkdet':'','QILO':'','TXUT':'','CData':'',
           'I':'', 'TCS':'',
           'DC':'', 'IQ':'', 'I H':'','TCS H':'','DC H':'', 'IQ H':'',
          'A S':'', 'A F':'', 'siggen':'', 'cal_initial arguments':'', 'SRS':'', 'RRA':'', 'type':'', 'pass/fail':''}
#Titles to be put on the x-axis when it is plotted
ToPlot = ['Test Start','CORRDB2','RESET 1','LDO','RESET 2','TX Pkdet',
         'RX Pkdet','QILO','TXUT', 'CData','I','TCS','DC','IQ']
#DataFrame for the titles that will be imported to excel sheet.
DataFrameList.append(pd.DataFrame(list(Titles.keys())))
#Defining a function that will take the path of the file and the version wanted
def inputFile(Path, version):
    #the loop that searches throught the os to find the files that have the initial calibration
    for roots, directory, files in os.walk(Path):
        if roots[-23:-16] == 'INITIAL':
            extract_elp_final = roots + '\elp_final.txt'
            Initials.append(extract_elp_final)
            #opens the file and checks if the test fails or not and add it to the initail failed files
            ini = open(extract_elp_final,'r')
            for i in ini:
                if 'FAILED - f' in i:
                    Initial_fails.append(i)
        #searches for the elp_log files
        for file in files:
         if file == 'elp_log.txt' and len(file) != 0:
            if roots[-17] == 'O':
              extract_elp_log = roots +'\\' + file
              #opens the files and checks the version of the wanted and sees if it fails and it to the failed files or passes
              lines = open(extract_elp_log,'r')
              for line in lines:
                if "SRS" in line and line[13:21] == version :
                 Passed_elp_log_files.append(extract_elp_log)
                if 'FAILED' in line and extract_elp_log in Passed_elp_log_files:
                     Failed_files.append(extract_elp_log)
    #filters out the failed files so Passed_elp_log_files only have the passed files
    for fail in Failed_files:
        if fail in Passed_elp_log_files:
            Passed_elp_log_files.remove(fail)
    #filtering out the passed initial tests from the list with all Initials
    for initials in Initials:
         for passed in Passed_elp_log_files:
             if passed[:-12] == initials[:-38]:
                 Passed_elp_final_files.append(initials)
    #gathering the mod numbers for the ones whose initials have failed
    Initial_fail = ['']*len(Failed_files)
    for failed in Failed_files:
        Mod.append(failed[-43:-39])
        Open = open(failed, 'r')
        #checking the reason why it failed and adding the reason to another list
        for o in Open:
            if 'Acceptance failure:' in o:
                acceptanc_failure.append(o[22:])
                if 'INITIAL' in o:
                    initial_indices.append(Failed_files.index(failed))
    num = 0
    #turning the reasons for the mods to fail into a dataframe and put next to those that failed
    for ind in initial_indices:
        Initial_fail[ind] = Initial_fails[num]
        num +=1
    #creating the dataframe for the failed files
    data = {'MOD#':Mod,'Path':Failed_files,'Acceptance failure':acceptanc_failure,'Initial Failure':Initial_fail}
    DF = pd.DataFrame(data)
    #Exporting the failed files to an excel sheet
    excelFile1 = pd.ExcelWriter("Failed Files.xlsx")
    DF.to_excel(excelFile1, index=False)
    excelFile1.save()
    #Extracting the data from the initail files
    for pp in range(len(Passed_elp_final_files)):
        Titles['MOD#'] = Passed_elp_final_files[pp][-69:-65]
        Titles['Path'] = Passed_elp_log_files[pp]
        #opening the elp_log files and extracting the data we need from specific lines
        with open(Passed_elp_log_files[pp],'r') as fp:
            t1 = linecache.getline(Passed_elp_log_files[pp], 2)[2:-2]
            t2 = linecache.getline(Passed_elp_log_files[pp], 11)[2:-2]
            t3 = linecache.getline(Passed_elp_log_files[pp], 15)[2:-2]
            t4 = linecache.getline(Passed_elp_log_files[pp], 18)[2:-2]
            t5 = linecache.getline(Passed_elp_log_files[pp], 20)[2:-2]
            t6 = linecache.getline(Passed_elp_log_files[pp], 24)[2:-2]
            t7 = linecache.getline(Passed_elp_log_files[pp], 27)[2:-2]
            t8 = linecache.getline(Passed_elp_log_files[pp], 29)[2:-2]
            t9 = linecache.getline(Passed_elp_log_files[pp], 33)[2:-2]
            t10 = linecache.getline(Passed_elp_log_files[pp], 36)[2:-2]
            t11 = linecache.getline(Passed_elp_log_files[pp], 38)[2:-2]
            t12 = linecache.getline(Passed_elp_log_files[pp], 42)[2:-2]
            t13 = linecache.getline(Passed_elp_log_files[pp], 45)[2:-2]
            t14 = linecache.getline(Passed_elp_log_files[pp], 53)[9:-1]
            t15 = linecache.getline(Passed_elp_log_files[pp], 54)[2:-2]
            #converting the the initial timings to a timestamp and giving value to the Test Titles
            stamp1 = pd.Timestamp(year=int(t1[0:4]), month=int(t1[4:6]), day=int(t1[6:8]), hour=int(t1[9:11]),
                                  minute=int(t1[11:13]), second=int(t1[13:15]))
            stamp2 = str(stamp1) + t1[15:-4]
            Titles['Test Start'] = stamp2

            stamp3 = pd.Timestamp(year=int(t2[0:4]), month=int(t2[4:6]), day=int(t2[6:8]), hour=int(t2[9:11]),
                                  minute=int(t2[11:13]), second=int(t2[13:15]))
            stamp4 = str(stamp3) + t2[15:-4]
            Initial_breakings['I S'] = stamp4

            stamp5 = pd.Timestamp(year=int(t3[0:4]), month=int(t3[4:6]), day=int(t3[6:8]), hour=int(t3[9:11]),
                                  minute=int(t3[11:13]), second=int(t3[13:15]))
            stamp6 = str(stamp5) + t3[15:-4]
            Initial_breakings['I T'] = stamp6
            Titles['I'] = str(datetime.strptime(Initial_breakings['I T'], "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(Initial_breakings['I S'], "%Y-%m-%d %H:%M:%S.%f"))[:-4]


            stamp7 = pd.Timestamp(year=int(t4[0:4]), month=int(t4[4:6]), day=int(t4[6:8]), hour=int(t4[9:11]),
                                  minute=int(t4[11:13]), second=int(t4[13:15]))
            stamp8 = str(stamp7) + t4[15:-4]
            Titles['I H'] = stamp8

            stamp9 = pd.Timestamp(year=int(t5[0:4]), month=int(t5[4:6]), day=int(t5[6:8]), hour=int(t5[9:11]),
                                  minute=int(t5[11:13]), second=int(t5[13:15]))
            stamp10 = str(stamp9) + t5[15:-4]
            Initial_breakings['TCS S'] = stamp10

            stamp11 = pd.Timestamp(year=int(t6[0:4]), month=int(t6[4:6]), day=int(t6[6:8]), hour=int(t6[9:11]),
                                  minute=int(t6[11:13]), second=int(t6[13:15]))
            stamp12 = str(stamp11) + t6[15:-4]
            Initial_breakings['TCS T'] = stamp12
            Titles['TCS'] = Titles['IQ'] = str(datetime.strptime(Initial_breakings['TCS T'], "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(Initial_breakings['TCS S'], "%Y-%m-%d %H:%M:%S.%f"))[:-4]


            stamp13 = pd.Timestamp(year=int(t7[0:4]), month=int(t7[4:6]), day=int(t7[6:8]), hour=int(t7[9:11]),
                                  minute=int(t7[11:13]), second=int(t7[13:15]))
            stamp14 = str(stamp13) + t7[15:-4]
            Titles['TCS H'] = stamp14

            stamp15 = pd.Timestamp(year=int(t8[0:4]), month=int(t8[4:6]), day=int(t8[6:8]), hour=int(t8[9:11]),
                                  minute=int(t8[11:13]), second=int(t8[13:15]))
            stamp16 = str(stamp15) + t8[15:-4]
            Initial_breakings['DC S'] = stamp16

            stamp17 = pd.Timestamp(year=int(t9[0:4]), month=int(t9[4:6]), day=int(t9[6:8]), hour=int(t9[9:11]),
                                  minute=int(t9[11:13]), second=int(t9[13:15]))
            stamp18 = str(stamp17) + t9[15:-4]
            Initial_breakings['DC T'] = stamp18
            Titles['DC'] = str(datetime.strptime(Initial_breakings['DC T'], "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(Initial_breakings['DC S'], "%Y-%m-%d %H:%M:%S.%f"))[:-4]



            stamp19 = pd.Timestamp(year=int(t10[0:4]), month=int(t10[4:6]), day=int(t10[6:8]), hour=int(t10[9:11]),
                                  minute=int(t10[11:13]), second=int(t10[13:15]))
            stamp20 = str(stamp19) + t10[15:-4]
            Titles['DC H'] = stamp20

            stamp21 = pd.Timestamp(year=int(t11[0:4]), month=int(t11[4:6]), day=int(t11[6:8]), hour=int(t11[9:11]),
                                  minute=int(t11[11:13]), second=int(t11[13:15]))
            stamp22 = str(stamp21) + t11[15:-4]
            Initial_breakings['IQ S'] = stamp22

            stamp23 = pd.Timestamp(year=int(t12[0:4]), month=int(t12[4:6]), day=int(t12[6:8]), hour=int(t12[9:11]),
                                  minute=int(t12[11:13]), second=int(t12[13:15]))
            stamp24 = str(stamp23) + t12[15:-4]
            Initial_breakings['IQ T'] = stamp24
            Titles['IQ'] = str(datetime.strptime(Initial_breakings['IQ T'], "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(Initial_breakings['IQ S'], "%Y-%m-%d %H:%M:%S.%f"))[:-4]



            stamp25 = pd.Timestamp(year=int(t13[0:4]), month=int(t13[4:6]), day=int(t13[6:8]), hour=int(t13[9:11]),
                                  minute=int(t13[11:13]), second=int(t13[13:15]))
            stamp26 = str(stamp25) + t13[15:-4]
            Titles['IQ H'] = stamp26

            stamp27 = pd.Timestamp(year=int(t14[0:4]), month=int(t14[4:6]), day=int(t14[6:8]), hour=int(t14[9:11]),
                                   minute=int(t14[11:13]), second=int(t14[13:15]))
            stamp28 = str(stamp27) + t14[15:-4]
            Titles['A S'] = stamp28

            stamp29 = pd.Timestamp(year=int(t15[0:4]), month=int(t15[4:6]), day=int(t15[6:8]), hour=int(t15[9:11]),
                                  minute=int(t15[11:13]), second=int(t15[13:15]))
            stamp30 = str(stamp29) + t15[15:-4]
            Titles['A F'] = stamp30
        #adding the other values in the Titles dicitionary besided the timings
        Titles['siggen'] = linecache.getline(Passed_elp_log_files[pp],40)[49:-1]
        Titles['cal_initial arguments'] = linecache.getline(Passed_elp_log_files[pp],13)[75:-1]
        Titles['SRS'] = linecache.getline(Passed_elp_log_files[pp],4)[9:-1]
        Titles['RRA'] = linecache.getline(Passed_elp_log_files[pp],5)[9:-1]
        Titles['type'] = linecache.getline(Passed_elp_log_files[pp],9)[14:-1]
        Titles['pass/fail'] = linecache.getline(Passed_elp_log_files[pp],48)[18:-1]
        # opening the initial files and extracting the data we need from specific lines
        with open(Passed_elp_final_files[pp],'r') as ff:
            if len(ff.readlines()) == 46:
                T1= linecache.getline(Passed_elp_final_files[pp],2)[2:-2]
                T2= linecache.getline(Passed_elp_final_files[pp],4)[2:-2]
                T3= linecache.getline(Passed_elp_final_files[pp],8)[2:-2]
                T4= linecache.getline(Passed_elp_final_files[pp],10)[2:-2]
                T5= linecache.getline(Passed_elp_final_files[pp],14)[2:-2]
                T6= linecache.getline(Passed_elp_final_files[pp],16)[2:-2]
                T7= linecache.getline(Passed_elp_final_files[pp],21)[2:-2]
                T8= linecache.getline(Passed_elp_final_files[pp],23)[2:-2]
                T9= linecache.getline(Passed_elp_final_files[pp],28)[2:-2]
                T10= linecache.getline(Passed_elp_final_files[pp],33)[2:-2]
                T11= linecache.getline(Passed_elp_final_files[pp],35)[2:-2]
                T12= linecache.getline(Passed_elp_final_files[pp],37)[9:-1]
                T13= linecache.getline(Passed_elp_final_files[pp],42)[2:-2]
                T14= linecache.getline(Passed_elp_final_files[pp],44)[2:-2]
                # converting the the initial timings to a timestamp and giving value to the Test Titles
                stamp31 = pd.Timestamp(year=int(T1[0:4]), month=int(T1[4:6]), day=int(T1[6:8]), hour=int(T1[9:11]),
                                       minute=int(T1[11:13]), second=int(T1[13:15]))
                stamp32 = str(stamp31) + T1[15:-4]


                stamp33 = pd.Timestamp(year=int(T2[0:4]), month=int(T2[4:6]), day=int(T2[6:8]), hour=int(T2[9:11]),
                                       minute=int(T2[11:13]), second=int(T2[13:15]))
                stamp34 = str(stamp33) + T2[15:-4]
                Titles['CORRDB2'] = str(datetime.strptime(stamp34, "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(stamp32, "%Y-%m-%d %H:%M:%S.%f"))[:-4]

                stamp35 = pd.Timestamp(year=int(T3[0:4]), month=int(T3[4:6]), day=int(T3[6:8]), hour=int(T3[9:11]),
                                       minute=int(T3[11:13]), second=int(T3[13:15]))
                stamp36 = str(stamp35) + T3[15:-4]


                stamp37 = pd.Timestamp(year=int(T4[0:4]), month=int(T4[4:6]), day=int(T4[6:8]), hour=int(T4[9:11]),
                                       minute=int(T4[11:13]), second=int(T4[13:15]))
                stamp38 = str(stamp37) + T4[15:-4]
                Titles['RESET 1'] = str(datetime.strptime(stamp36, "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(stamp34, "%Y-%m-%d %H:%M:%S.%f"))[:-4]

                stamp39 = pd.Timestamp(year=int(T5[0:4]), month=int(T5[4:6]), day=int(T5[6:8]), hour=int(T5[9:11]),
                                       minute=int(T5[11:13]), second=int(T5[13:15]))
                stamp40 = str(stamp39) + T5[15:-4]


                stamp41 = pd.Timestamp(year=int(T6[0:4]), month=int(T6[4:6]), day=int(T6[6:8]), hour=int(T6[9:11]),
                                       minute=int(T6[11:13]), second=int(T6[13:15]))
                stamp42 = str(stamp41) + T6[15:-4]
                Titles['LDO'] = str(datetime.strptime(stamp38, "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(stamp36, "%Y-%m-%d %H:%M:%S.%f"))[:-4]


                stamp43 = pd.Timestamp(year=int(T7[0:4]), month=int(T7[4:6]), day=int(T7[6:8]), hour=int(T7[9:11]),
                                       minute=int(T7[11:13]), second=int(T7[13:15]))
                stamp44 = str(stamp43) + T7[15:-4]
                Titles['RESET 2'] = str(datetime.strptime(stamp40, "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(stamp38, "%Y-%m-%d %H:%M:%S.%f"))[:-4]

                stamp45 = pd.Timestamp(year=int(T8[0:4]), month=int(T8[4:6]), day=int(T8[6:8]), hour=int(T8[9:11]),
                                       minute=int(T8[11:13]), second=int(T8[13:15]))
                stamp46 = str(stamp45) + T8[15:-4]
                Titles['TX Pkdet'] = str(datetime.strptime(stamp42, "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(stamp40, "%Y-%m-%d %H:%M:%S.%f"))[:-4]

                stamp47 = pd.Timestamp(year=int(T9[0:4]), month=int(T9[4:6]), day=int(T9[6:8]), hour=int(T9[9:11]),
                                       minute=int(T9[11:13]), second=int(T9[13:15]))
                stamp48 = str(stamp47) + T9[15:-4]


                stamp49 = pd.Timestamp(year=int(T10[0:4]), month=int(T10[4:6]), day=int(T10[6:8]), hour=int(T10[9:11]),
                                       minute=int(T10[11:13]), second=int(T10[13:15]))
                stamp50 = str(stamp49) + T10[15:-4]
                Titles['RX Pkdet'] = str(datetime.strptime(stamp46, "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(stamp44, "%Y-%m-%d %H:%M:%S.%f"))[:-4]


                stamp51 = pd.Timestamp(year=int(T11[0:4]), month=int(T11[4:6]), day=int(T11[6:8]), hour=int(T11[9:11]),
                                       minute=int(T11[11:13]), second=int(T11[13:15]))
                stamp52 = str(stamp51) + T11[15:-4]
                Titles['QILO'] = str(datetime.strptime(stamp50, "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(stamp48, "%Y-%m-%d %H:%M:%S.%f"))[:-4]


                stamp53 = pd.Timestamp(year=int(T12[0:4]), month=int(T12[4:6]), day=int(T12[6:8]), hour=int(T12[9:11]),
                                       minute=int(T12[11:13]), second=int(T12[13:15]))
                stamp54 = str(stamp53) + T12[15:-4]
                Titles['TXUT'] = str(datetime.strptime(stamp54, "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(stamp52, "%Y-%m-%d %H:%M:%S.%f"))[:-4]


                stamp55 = pd.Timestamp(year=int(T13[0:4]), month=int(T13[4:6]), day=int(T13[6:8]), hour=int(T13[9:11]),
                                       minute=int(T13[11:13]), second=int(T13[13:15]))
                stamp56 = str(stamp55) + T13[15:-4]



                stamp57 = pd.Timestamp(year=int(T14[0:4]), month=int(T14[4:6]), day=int(T14[6:8]), hour=int(T14[9:11]),
                                       minute=int(T14[11:13]), second=int(T14[13:15]))
                stamp58 = str(stamp57) + T14[15:-4]
                Titles['CData'] = str(datetime.strptime(stamp58, "%Y-%m-%d %H:%M:%S.%f") - datetime.strptime(stamp56, "%Y-%m-%d %H:%M:%S.%f"))[:-4]
                #gathering the values in a list and convert it to a dataframe and add it to another big list
                lis = list(Titles.values())
                DataFrameList.append(pd.DataFrame(lis))
                ListOfLists.append([lis[0]] + lis[2:16])

            else:
                #making list of invalid files that may have missing tests
                invalid.append(ff)
    #concatenating the dataframes to one with no repeated indexing
    df = pd.concat(DataFrameList,axis=1,ignore_index=True)
    #Exporting the Passed Files to an excel sheet
    excelFile2 = pd.ExcelWriter("Passed Files.xlsx")
    df.to_excel(excelFile2, index=False, index_label=None)
    excelFile2.save()
    MOD_Numbers = sorted(set(df.iloc[0][1:]))
    dict = {}
    #creating a dictionary with the mods without repeatation as keys and it's values are the data after each test
    for mod in MOD_Numbers:
        dict[mod] =[]
    listy = list(dict.keys())
    #filling up each mod in the dictionary with the data for each of it's callibration
    for listi in ListOfLists:
        if listi[0] in listy:
            dict[listi[0]].append(listi[1:])

    count = 0
    #Plotting the data of each module in a seperate plot
    for k,v in dict.items():
      for V in v:
          # datetimes =[]
          # tt1 = datetime.strptime("00:00:00", "%H:%M:%S")
          # for part in V[1:]:
          #     tt1 += datetime.strptime(part, "%H:%M:%S")
          #     datetimes.append(t)
       plt.title(MOD_Numbers[count])
       plt.plot(ToPlot,V)
       plt.xticks(rotation=45)
      count +=1
      plt.show()
    #printing out the invalid Tests
    print(invalid)

#Calling the Function
print(inputFile(r'\\172.19.240.64\uhnder-nas\Modules\Working\Calico\Mukna_UR-RS2110-P4\ModuleData','0.81.1+2'))
